// Generated by CoffeeScript 1.12.0
(function() {
  var EpitechAPIConnector;

  EpitechAPIConnector = (function() {
    function EpitechAPIConnector(login, password, stream) {
      var EpitechAPISettings, request;
      this.login = login;
      this.password = password;
      this.isSignedIn = false;
      EpitechAPISettings = require("./settings").EpitechAPISettings;
      this.settings = new EpitechAPISettings;
      this.stream = stream;
      request = require("request");
      this._cookieJar = request.jar();
      this.request = require("request").defaults({
        jar: true
      });
    }

    EpitechAPIConnector.prototype.log = function(string) {
      if (this.stream) {
        return this.stream.write(string + "\n");
      }
    };

    EpitechAPIConnector.prototype.formatRequest = function(response) {
      return JSON.parse(response.body);
    };

    EpitechAPIConnector.prototype.signIn = function(callbackSuccess, callbackFailure) {
      var data, url;
      data = {
        form: {
          login: this.login,
          password: this.password,
          remind: true
        }
      };
      url = this.settings.url_signIn();
      this.log("Getting " + url);
      return this.request.post(url, data, (function(_this) {
        return function(error, response) {
          var json;
          if (!error && response.statusCode === 200) {
            _this.isSignedIn = true;
            json = _this.formatRequest(response);
            _this.log("Student has been logged in");
            if (callbackSuccess) {
              callbackSuccess(json);
            }
          } else {
            _this.log("Student cannot be logged in");
            if (callbackFailure) {
              callbackFailure(error, response);
            }
          }
          return _this.isSignedIn;
        };
      })(this));
    };

    EpitechAPIConnector.prototype.signOut = function(callbackSuccess, callbackFailure) {
      var url;
      url = this.settings.url_signOut;
      this.log("Posting " + url);
      return this.request.post(url, (function(_this) {
        return function(error, response) {
          var json;
          if (!error && response.statusCode === 200) {
            json = _this.formatRequest(response);
            _this.log("Succesfully post'd " + url);
            if (callbackSuccess) {
              return callbackSuccess(json);
            }
          } else {
            _this.log("Failed to get " + url);
            if (callbackFailure) {
              return callbackFailure(error, response);
            }
          }
        };
      })(this));
    };

    EpitechAPIConnector.prototype.getProfile = function(login, callbackSuccess, callbackFailure) {
      var url;
      url = this.settings.url_profile(login);
      this.log("Getting " + url);
      return this.request.get(url, (function(_this) {
        return function(error, response) {
          var json;
          if (!error && response.statusCode === 200) {
            json = _this.formatRequest(response);
            _this.log("Succesfully get'd " + url);
            if (callbackSuccess) {
              return callbackSuccess(json);
            }
          } else {
            _this.log("Failed to get " + url);
            if (callbackFailure) {
              return callbackFailure(error, response);
            }
          }
        };
      })(this));
    };

    EpitechAPIConnector.prototype.getModule = function(year, codemodule, codeinstance, callbackSuccess, callbackFailure) {
      var url;
      url = this.settings.url_module(year, codemodule, codeinstance);
      this.log("Getting " + url);
      return this.request.get(url, (function(_this) {
        return function(error, response) {
          var json;
          if (!error && response.statusCode === 200) {
            json = _this.formatRequest(response);
            _this.log("Succesfully get'd " + url);
            if (callbackSuccess) {
              return callbackSuccess(json);
            }
          } else {
            _this.log("Failed to get " + url);
            if (callbackFailure) {
              return callbackFailure(error, response);
            }
          }
        };
      })(this));
    };

    EpitechAPIConnector.prototype.getMeetingSlots = function(year, codemodule, codeinstance, codeacti, callbackSuccess, callbackFailure) {
      var url;
      url = this.settings.url_activityMeetingSlots(year, codemodule, codeinstance, codeacti);
      this.log("Getting " + url);
      return this.request.get(url, (function(_this) {
        return function(error, response) {
          var json;
          if (!error && response.statusCode === 200) {
            json = _this.formatRequest(response);
            _this.log("Succesfully get'd " + url);
            if (callbackSuccess) {
              return callbackSuccess(json);
            }
          } else {
            _this.log("Failed to get " + url);
            if (callbackFailure) {
              return callbackFailure(error, response);
            }
          }
        };
      })(this));
    };

    EpitechAPIConnector.prototype.getActivity = function(year, module, city, acti, ev, callbackSuccess, callbackFailure) {
      var url;
      url = this.settings.url_event(year, module, city, acti, ev);
      this.log("Getting " + url);
      return this.request.get(url, (function(_this) {
        return function(error, response) {
          var json;
          if (!error && response.statusCode === 200) {
            json = _this.formatRequest(response);
            _this.log("Succesfully get'd " + url);
            if (callbackSuccess) {
              return callbackSuccess(json);
            }
          } else {
            _this.log("Failed to get " + url);
            if (callbackFailure) {
              return callbackFailure(error, response);
            }
          }
        };
      })(this));
    };

    EpitechAPIConnector.prototype.getActivityRegistered = function(year, module, city, acti, ev, callbackSuccess, callbackFailure) {
      var url;
      url = this.settings.url_eventRegistered(year, module, city, acti, ev);
      this.log("Getting " + url);
      return this.request.get(url, (function(_this) {
        return function(error, response) {
          var json;
          if (!error && response.statusCode === 200) {
            json = _this.formatRequest(response);
            _this.log("Succesfully get'd " + url);
            if (callbackSuccess) {
              return callbackSuccess(json);
            }
          } else {
            _this.log("Failed to get " + url);
            if (callbackFailure) {
              return callbackFailure(error, response);
            }
          }
        };
      })(this));
    };

    EpitechAPIConnector.prototype.getDayActivities = function(startYear, startMonth, startDay, endYear, endMonth, endDay, callbackSuccess, callbackFailure) {
      var url;
      url = this.settings.url_dayActivities(startYear, startMonth, startDay, endYear, endMonth, endDay);
      this.log("Getting " + url);
      return this.request.get(url, (function(_this) {
        return function(error, response) {
          var json;
          if (!error && response.statusCode === 200) {
            json = _this.formatRequest(response);
            _this.log("Succesfully get'd " + url);
            if (callbackSuccess) {
              return callbackSuccess(json);
            }
          } else {
            _this.log("Failed to get " + url);
            if (callbackFailure) {
              return callbackFailure(error, response);
            }
          }
        };
      })(this));
    };

    EpitechAPIConnector.prototype.setActivityStatus = function(year, module, city, acti, ev, email, status, callbackSuccess, callbackFailure) {
      var headers, payload, url;
      url = this.settings.url_eventChangeStatus(year, module, city, acti, ev, email, status);
      this.log("Posting " + url);
      headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
      };
      payload = {
        url: url,
        body: "items[0][login]=" + email + "&items[0][present]=" + status,
        method: "POST",
        headers: headers
      };
      return this.request(payload, (function(_this) {
        return function(error, response) {
          var json;
          if (!error && response.statusCode === 200) {
            json = _this.formatRequest(response);
            _this.log("Succesfully post'd " + url);
            if (callbackSuccess) {
              return callbackSuccess(json);
            }
          } else {
            _this.log("Failed to post " + url);
            if (callbackFailure) {
              return callbackFailure(error, response);
            }
          }
        };
      })(this));
    };

    return EpitechAPIConnector;

  })();

  exports.EpitechAPIConnector = EpitechAPIConnector;

}).call(this);
